import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation
from scipy.interpolate import interp1d
from matplotlib.cm import get_cmap
import matplotlib.colors as mcolors

def parametric_curve(s):
    """Define the parametric curve for initialization."""
    return np.array([s, np.sin(3 * np.pi * s / n)])

def compute_arc_length(s_vals, curve_func):
    """Compute cumulative arc length along the curve."""
    arc_lengths = [0]
    for i in range(1, len(s_vals)):
        ds = np.linalg.norm(curve_func(s_vals[i]) - curve_func(s_vals[i - 1]))
        arc_lengths.append(arc_lengths[-1] + ds)
    return np.array(arc_lengths)

def generate_equally_spaced_nodes(n, s_range):
    """Generate n+2 equally spaced points along a curve using arc-length parameterization."""
    s_fine = np.linspace(s_range[0], s_range[1], 1000)  # Fine sampling
    fine_curve = np.array([parametric_curve(s) for s in s_fine])
    
    # Compute arc lengths along the fine sampling
    arc_lengths = compute_arc_length(s_fine, parametric_curve)
    
    # Create interpolation functions for x and y based on arc length
    interp_x = interp1d(arc_lengths, fine_curve[:, 0], kind='linear')
    interp_y = interp1d(arc_lengths, fine_curve[:, 1], kind='linear')
    
    # Generate n+2 equally spaced arc-length positions
    equal_arc_lengths = np.linspace(0, arc_lengths[-1], n + 2)
    x_vals = interp_x(equal_arc_lengths)
    y_vals = interp_y(equal_arc_lengths)
    
    return np.column_stack((x_vals, y_vals))

def compute_forces(vertices, l, alpha):
    """Compute forces"""
    n = len(vertices)
    forces = np.zeros_like(vertices)
    for i in range(1, n-1):
        e_prev = vertices[i] - vertices[i-1]
        e_next = vertices[i+1] - vertices[i]
        norm_prev = np.linalg.norm(e_prev)
        norm_next = np.linalg.norm(e_next)
        if norm_prev == 0 or norm_next == 0:
            continue  # Avoid division by zero
        cos_theta = np.dot(e_prev, e_next) / (norm_prev * norm_next)
        cos_theta = np.clip(cos_theta, -1, 1)
        theta = np.arccos(cos_theta)
        
        if np.abs(cos_theta) < 1:
            dtheta_dx = -1 / np.sqrt(1 - cos_theta ** 2) * (e_next / norm_next - e_prev / norm_prev)
        else:
            dtheta_dx = np.zeros_like(e_prev)  # Avoid singularity
        
        forces[i] += alpha * (2 * theta / l) * dtheta_dx
    
    return -forces

def enforce_length_constraints(vertices, l, iterations=5):
    """Enforce that each segment has length l using iterative projection."""
    n = len(vertices) - 1
    for _ in range(iterations):
        for i in range(n):
            delta = vertices[i+1] - vertices[i]
            current_length = np.linalg.norm(delta)
            if current_length == 0:
                continue
            correction = (current_length - l) * (delta / current_length) / 2
            vertices[i] += correction
            vertices[i+1] -= correction

def relax_rod(vertices, l, alpha, gamma, dt, steps):
    """Simulate the rod relaxation process with explicit length constraint enforcement."""
    history = []
    edge_lengths = []

    for step in range(steps):
        if step % (steps // 50) == 0:  # Store more frames for smoother animation
            history.append(vertices.copy())

        forces = compute_forces(vertices, l, alpha)
        vertices += (dt / gamma) * forces
        enforce_length_constraints(vertices, l)

        # Compute edge lengths at each timestep
        edge_lengths.append([np.linalg.norm(vertices[i + 1] - vertices[i]) for i in range(len(vertices) - 1)])
    
    return history, edge_lengths

# Parameters
n = 10  # Number of segments
l = 1.0  # Rest length of each segment
alpha = 1.0  # Bending stiffness
gamma = 1.0  # Damping coefficient
dt = 0.01  # Time step
steps = 500  # Simulation steps

# Generate rod with equal arc-length spacing
vertices = generate_equally_spaced_nodes(n, [0, n * l])

# Relax the rod 
history, edge_lengths = relax_rod(vertices, l, alpha, gamma, dt, steps)

# ---- PLOT EDGE LENGTHS OVER TIME ----
edge_lengths = np.array(edge_lengths)

plt.figure(figsize=(8, 5))
for i in range(edge_lengths.shape[1]):  # Plot each segment's length
    plt.plot(range(len(edge_lengths)), edge_lengths[:, i], label=f"Edge {i+1}")

plt.axhline(y=l, color='k', linestyle='--', label="Target Length")
plt.xlabel("Timestep")
plt.ylabel("Edge Length")
plt.title("Edge Lengths Over Time")
plt.legend(loc='best', fontsize='small')
plt.show()

# ---- ANIMATION ----
fig, ax = plt.subplots(figsize=(8, 5))
ax.set_xlim(np.min(history[0][:, 0]) - 1, np.max(history[0][:, 0]) + 1)
ax.set_ylim(np.min(history[0][:, 1]) - 1, np.max(history[0][:, 1]) + 1)
ax.set_xlabel("x")
ax.set_ylabel("y")
ax.set_title("Rod Relaxation Animation")

line, = ax.plot([], [], 'o-', lw=2, markersize=5, color='purple')

def init():
    """Initialize animation frame"""
    line.set_data([], [])
    return line,

def update(frame):
    """Update function for animation"""
    state = history[frame]
    line.set_data(state[:, 0], state[:, 1])
    return line,

ani = animation.FuncAnimation(fig, update, frames=len(history), init_func=init, blit=True, interval=50)

ani.save("rod_relaxation.gif", writer="pillow", fps=30)

plt.show()

